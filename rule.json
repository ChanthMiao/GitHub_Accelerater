{
	"request": [
		{
			"action": "redirect",
			"enable": true,
			"exclude": "",
			"group": "GitHub",
			"isFunction": false,
			"matchType": "regexp",
			"name": "GitHub Raw",
			"pattern": "^https://raw.githubusercontent.com/(.*?/.*?)/(.*)",
			"ruleType": "redirect",
			"to": "https://cdn.jsdelivr.net/gh/$1@$2"
		}
	],
	"sendHeader": [],
	"receiveHeader": [
		{
			"code": "let rt = detail.type;\nif (rt === 'script' || rt === 'stylesheet' || rt === 'main_frame' || rt === 'sub_frame') {\n  for (let i in val) {\n    if (val[i].name.toLowerCase() === 'content-security-policy') {\n      let s = val[i].value;\n      s = s.replace(/\\*\\.githubusercontent\\.com/g, '$& cdn.jsdelivr.net');\n      val[i].value = s;\n    }\n  }\n}",
			"enable": true,
			"exclude": "",
			"group": "GitHub",
			"isFunction": true,
			"matchType": "domain",
			"name": "GitHub CSP",
			"pattern": "github.com",
			"ruleType": "modifyReceiveHeader"
		},
		{
			"enable": true,
			"name": "GitHub io CSP",
			"ruleType": "modifyReceiveHeader",
			"matchType": "domain",
			"pattern": "github.io",
			"exclude": "",
			"group": "GitHub",
			"isFunction": true,
			"code": "let rt = detail.type;\nif (rt === 'script' || rt === 'stylesheet' || rt === 'main_frame' || rt === 'sub_frame') {\n  for (let i in val) {\n    if (val[i].name.toLowerCase() === 'content-security-policy') {\n      let s = val[i].value;\n      s = s.replace(/\\*\\.githubusercontent\\.com/g, '$& cdn.jsdelivr.net');\n      val[i].value = s;\n    }\n  }\n}"
		}
	],
	"receiveBody": []
}
